package com.qualcomm.ftcrobotcontroller.opmodes;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.LightSensor;
import com.qualcomm.robotcore.hardware.Servo;

/**
 * Example autonomous program.
 * <p>
 * This example program uses elapsed time to determine how to move the robot.
 * The OpMode.java class has some class members that provide time information
 * for the current op mode.
 * The public member variable 'time' is updated before each call to the run() event.
 * The method getRunTime() returns the time that has elapsed since the op mode
 * starting running to when the method was called.
 */
public class MainActivity extends OpMode {
    Dcmotor motorFrontRight;
    Dcmotor motorBackRight;
    Dcmotor motorFrontLeft;
    Dcmotor motorBackLeft;
    Dcmotor motorLeftScoop;
    Dcmotor motorRightScoop;
    final static double MOTOR_POWER = 0.15;

    @Override

    public void int() {
      motorFrontLeft = hardwareMap.dcMotor.get("motor_1");
        motorFrontRight = hardwareMap.dcMotor.get("motor_2");
        motorBackRight = hardwareMap.dcMotor.get("motor_3");
        motorBackLeft = hardwareMap.dcMotor.get("motor_4");
        motorLeftScoop = hardwareMap.dcMotor.get("motor_5");
        motorRightScoop = hardwareMap.dcMotor.get("motor_6");



    }

    public void start() {

        motorBackLeft.setpower(0.0);
        motorFrontLeft.setpower(0.0);
        motorFrontRight.setpower(0.0);
        motorBackRight.setpower(0.0);

        motorBackLeft.setpower(-MOTOR_POWER);
        motorFrontLeft.setpower(-MOTOR_POWER);
        motorFrontRight.setpower(MOTOR_POWER);
        motorBackRight.setpower(MOTOR_POWER);

        wait(1000);

        motorBackLeft.setpower(0.0);
        motorFrontLeft.setpower(0.0);
        motorFrontRight.setpower(0.0);
        motorBackRight.setpower(0.0);

        motorBackLeft.setpower(MOTOR_POWER);
        motorFrontLeft.setpower(MOTOR_POWER);
        motorFrontRight.setpower(MOTOR_POWER);
        motorBackRight.setpower(MOTOR_POWER);

        wait(1000);
        motorBackLeft.setpower(0.0);
        motorFrontLeft.setpower(0.0);
        motorFrontRight.setpower(0.0);
        motorBackRight.setpower(0.0);
        wait(1000);

        motorBackLeft.setpower(-MOTOR_POWER);
        motorFrontLeft.setpower(-MOTOR_POWER);
        motorFrontRight.setpower(-MOTOR_POWER);
        motorBackRight.setpower(-MOTOR_POWER);

        wait(1000);
        motorBackLeft.setpower(0.0);
        motorFrontLeft.setpower(0.0);
        motorFrontRight.setpower(0.0);
        motorBackRight.setpower(0.0);
        wait(1000);

        motorBackLeft.setpower(MOTOR_POWER);
        motorFrontLeft.setpower(MOTOR_POWER);
        motorFrontRight.setpower(-MOTOR_POWER);
        motorBackRight.setpower(-MOTOR_POWER);

        wait(1000);
        motorBackLeft.setpower(0.0);
        motorFrontLeft.setpower(0.0);
        motorFrontRight.setpower(0.0);
        motorBackRight.setpower(0.0);
        









    }


}

